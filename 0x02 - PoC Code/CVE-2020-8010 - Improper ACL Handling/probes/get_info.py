'''

get_info: grabs system information such as OS and installation path

'''

from probes.dependencies import *

def generate_probe():

  packet_header = "nimbus/1.0 {:d} {:d}\r\n"

  packet_body = (
  "mtype\x00"
  "7\x004\x00100\x00"
  "cmd\x00"
  "7\x009\x00"
  "get_info\x00"
  "seq\x00"
  "1\x002\x000\x00"
  "ts\x00"
  "1\x0011\x001571974657\x00"
  "frm\x00"
  )
  packet_body += "7\x00{:d}\x00".format(len(CLIENT))
  packet_body += CLIENT
  packet_body += (
  "tout\x00"
  "1\x004\x00180\x00"
  "addr\x00"
  "7\x000\x00"
  )
  packet_args = (
  "interfaces\x00"
  "1\x002\x000\x00"
  "robot\x00"
  "7\x001\x00\x00"
  )

  packet_header = packet_header.format(
    len(packet_body),
    len(packet_args)
  )

  probe = packet_header + packet_body + packet_args

  return bytes(probe, 'utf-8')

def parse(response):

  result = \
  {
  "robotname": "",
  "robotip": "",
  "hubname": "",
  "hubip": "",
  "domain": "",
  "origin": "",
  "source": "",
  "robot_device_id": "",
  "robot_mode": "",
  "hubrobotname": "",
  "log_level": "",
  "log_file": "",
  "license": "",
  "version": "",
  "requests": "",
  "uptime": "",
  "started": "",
  "os_major": "",
  "os_minor": "",
  "os_version": "",
  "os_description": "",
  "os_user1": "",
  "os_user2": "",
  "processor_type": "",
  "workdir": "",
  "current_time": "",
  "access_0": "",
  "access_1": "",
  "access_2": "",
  "access_3": "",
  "access_4": "",
  "timezone_diff": "",
  "timezone_daylight": "",
  "timezone_name": "",
  "locale": "",
  "spoolport": "",
  "last_inst_change": ""
  }

  info   = response.decode().split('\x00')
  values = result.keys()

  for i in range(len(info)):
    if info[i] in values:
      result[info[i]] = info[i+3]

  p_good("Probe successful\n")
  for k, v in result.items():
    print("{:20} {:s}".format(k, v))

def probe(host, port):
  probe = generate_probe()

  p_info("Sending get_info probe to %s:%d" % (host, port))
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.settimeout(TIMEOUT)
  try:
    sock.connect((host, port))
    sock.send(probe)
    parse(sock.recv(4096))
  except:
    p_error("Failed to connect to %s:%d" % (host, port))
